apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if eq .Values.federation.configMode "mcp" }}
      annotations:
        traffic.sidecar.istio.io/includeInboundPorts: "*"
        traffic.sidecar.istio.io/excludeInboundPorts: "15010"
      {{- end }}
      labels:
        {{- include "chart.labels" . | nindent 8 }}
        {{- if .Values.istio.ambientModeEnabled }}
        istio.io/dataplane-mode: ambient
        {{- else }}
        sidecar.istio.io/inject: "true"
        {{- end }}
    spec:
      serviceAccountName: {{ include "chart.name" . }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        args:
        - '--meshPeers={{ .Values.federation.meshPeers | toJson }}'
        - '--exportedServiceSet={{ .Values.federation.exportedServiceSet | toJson }}'
        - '--configMode={{ .Values.federation.configMode }}'
        env:
        - name: CONTROLLER_SERVICE_FQDN
          value: "{{ include "chart.name" . }}.{{ .Release.Namespace }}.svc.cluster.local"
        ports:
        - name: grpc-mcp
          containerPort: 15010
        - name: grpc-fds
          containerPort: 15080
